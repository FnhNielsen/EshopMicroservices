eureka.client.serviceUrl.defaultZone=http://eureka:password@localhost:8761/eureka
spring.application.name=api-gateway
logging.level.root=INFO
logging.level.org.springframework.cloud.gateway.route.RouteDefinitionLocator = INFO
logging.level.org.springframework.cloud.gateway = TRACE

## Product service Route
spring.cloud.gateway.routes[0].id=product-service
spring.cloud.gateway.routes[0].uri=lb://product-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/product

## Inventory service Route
spring.cloud.gateway.routes[1].id=inventory-service
spring.cloud.gateway.routes[1].uri=lb://inventory-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/inventory

## Cart service Route
spring.cloud.gateway.routes[2].id=cart-service
spring.cloud.gateway.routes[2].uri=lb://cart-service
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/cart

## Discovery Server Route
spring.cloud.gateway.routes[3].id=discovery-server
spring.cloud.gateway.routes[3].uri=http://localhost:8761/
spring.cloud.gateway.routes[3].predicates[0]=Path=/eureka/web
spring.cloud.gateway.routes[3].filters[0]=SetPath=/

## Discovery Server Static Resources Route //Enables eureka server to load css files on web
spring.cloud.gateway.routes[4].id=discovery-server-static
spring.cloud.gateway.routes[4].uri=http://localhost:8761/
spring.cloud.gateway.routes[4].predicates[0]=Path=/eureka/**



## Openid-configuration //This takes the authorization_endpoint and token_endpoint values from the openid-configuration
## in the keycloak eShopMicroservices-realm, and spring-boot will automatically configure those values, so it knows if
## users are authorized and if they have a valid access token.
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8181/realms/eShopMicroservices-realm
